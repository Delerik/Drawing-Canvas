def repoUrl = "192.168.243.3/DTP/python-immuniweb-integration.git"
def registryUrl = "https://devops-tools.dtp.cyxtera.com:9443"
def registry_docker = "devops-tools.dtp.cyxtera.com:9443"
def namespace_registry = "dtp"



def config = {}
def tagName = ""



node("ms") {
    def helper = load "/opt/tools/jenkins_pipeline_methods.groovy"

    stage('Get from GIT & Config'){
        config = helper.getFromGitAndConfig("release")
    }




    stage("Build and push to production registry") {

        def REGISTRY_URL = registryUrl.replaceAll('\n', '').replaceAll('https://', '').replaceAll('http://', '')
        def FINAL_DOCKER_IMAGE = "$REGISTRY_URL/dtp/$config.PROJECT_NAME:$config.APP_VERSION"
        docker.withRegistry(registryUrl, "dtp_prod") {
            sh "docker build -f Dockerfile -t $FINAL_DOCKER_IMAGE ."
            sh "docker push $FINAL_DOCKER_IMAGE"
            sh "docker rmi $FINAL_DOCKER_IMAGE"
        }
    }

    stage("testing") {
        sh "./run-test.sh"
    }


    stage('Deploy on Environment') {
        def profile = "prod"
        def credential='kubeconfigprod'
        if (config.BRANCH_NAME.toLowerCase().contains("master")) {
            println("Print to env: " +  profile)
        }else {
            profile = "beta"
            credential='kubeconfigbeta'
            println("Print to env: " + profile)
        }


       withCredentials([file(credentialsId: credential, variable: 'KUBECONF')]) {
            def kubeConfig = "kubernetes/tempConfig.yaml"
            sh "cp -f \$KUBECONF $kubeConfig"
            dir("kubernetes") {
                def dimage = "$registry_docker/$namespace_registry/$config.PROJECT_NAME:$config.APP_VERSION".replace("/", "\\/")
                sh "sed -i -- 's/DOCKER_IMAGE/$dimage/g' *deployment*"
                sh "sed -i -- 's/PROFILE_VAR/$profile/g' *deployment*"
            }
            try {
                helper.withKubernetesConfig("kubectl create configmap dtp-immuniweb-consumer-config --from-file=params.ini=configuration/beta/params.ini", kubeConfig)
                helper.tryKubernetesDeploy("kubernetes/external-services-beta.yaml", kubeConfig, true)



            } catch (e) {
                sh "echo $e"
            }



            helper.tryKubernetesDeploy("kubernetes/deployment.yaml", kubeConfig, true)
        }
    }



    stage("Tagging") {
        tagName = config.PROJECT_NAME + "-a" + config.APP_VERSION
        def userEmailDomain = "appgate.com"
        def mydate = new Date(System.currentTimeMillis()).format( 'yyyy-MM-dd' )
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dtp-git-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
            sh "git config http.postBuffer 1048576000"
            sh "git config user.email $GIT_USERNAME@$userEmailDomain"
            sh "git config user.name $GIT_USERNAME"
            sh "git tag -a $tagName -m 'Generated by Jenkins on $mydate'"
            sh 'git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"'
            sh "git fetch origin"
            sh "git push 'http://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl}'  --tags"
        }
    }



}